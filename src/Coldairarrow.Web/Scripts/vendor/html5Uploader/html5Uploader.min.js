(function ($) { $.extend(window, { "Html5Uploader": Html5Uploader }); function Html5Uploader(container, options) { var defaults = { imgs: [], enableScale: false, asyncUpload: false, uploadUrl: null, maxHeight: 800, maxWidth: 800, uploadLimit: 5, sizeLimit: 5, postData: null, type: "image" }; var imgItemHtml = ['<li class="up-pic">', '<div class="up-clip">', '<span data-src="" style="display:none"></span>', '<a href="" style="display:none"></a>', '<img src="" style="display:block;" />', "</div>", '<div class="up-mask"></div>', '<div class="up-progress">', '<div class="pos"></div>', "</div>", '<a class="up-del" href="javascript:void(0)" title="关闭">&nbsp;</a>', "</li>"].join(""); var $container, $imgWrap, $file; var files, fileCount = 0, uploadVerNo; function init() { options = $.extend({}, defaults, options); $container = $(container).addClass("up-container"); if (!$container.length) { return } $imgWrap = $container.find("ul.up-pics"); if (!$imgWrap.length) { $imgWrap = $('<ul class="up-pics"></ul>').appendTo($container) } var accept = options.type == "image" ? "image/*" : "*/*"; $file = $('<input type="file" class="up-file" accept="' + accept + '" />').appendTo($container); if (options.uploadLimit > 1) { $file.attr("multiple", "multiple") } $file.wrap('<div class="up-entry"></div>').change(function () { if (!this.files || !this.files.length) { return } uploadVerNo = Math.random(); files = this.files; fileCount = files.length; asyncUpload(0) }); $imgWrap.on("tap", "a.up-del", function () { $(this).closest("li.up-pic").remove(); uploadCountCheck() }); $imgWrap.on("click", "a.up-del", function () { $(this).closest("li.up-pic").remove(); uploadCountCheck() }); uploadCountCheck(); var imgs = []; if (options.imgs) { var type = getType(options.imgs); switch (type) { case "string": imgs = options.imgs.split(","); break; case "array": imgs = options.imgs; break; default: break } } imgs.forEach(function (url) { insertItem(url) }) } function asyncUpload(index) { if (index >= files.length) { $file.val(""); return } uploadFile(files[index], function () { asyncUpload(++index) }) } function uploadFile(file, onUploadComplete) { if (!file.type.match(/image.*/) && options.type == "image") { alert("只能选择图片文件."); fileCount--; if (onUploadComplete) { onUploadComplete.call() } return } if (file.size > options.sizeLimit * 1024 * 1024) { alert("图片最大不能超过" + options.sizeLimit + "M."); fileCount--; if (onUploadComplete) { onUploadComplete.call() } return } if (isOverUploadLimit()) { alert("最多只能上传" + options.uploadLimit + "个文件."); fileCount = options.uploadLimit; if (onUploadComplete) { onUploadComplete.call() } return } var orientation = null; if (options.enableScale) { EXIF.getData(file, function () { EXIF.getAllTags(this); orientation = EXIF.getTag(this, "Orientation") }) } var fileName = file.name; var fileType = file.type.indexOf("image/") == -1 ? "file" : "image"; var $imgItem = $(imgItemHtml).appendTo($imgWrap); if (fileType == "file") { $imgItem.find("img").css("display", "none"); $imgItem.find("div a").css("display", "block") } function readFile() { var reader = new FileReader(); reader.onloadend = function () { if (reader.error) { alert("文件获取失败！"); $imgItem.remove(); if (onUploadComplete) { onUploadComplete.call() } return } var fileData = reader.result; if (fileType == "image") { $imgItem.find("img").attr({ "src": fileData, "onload": loadimg }) } if (options.enableScale) { scaleAndUpload(fileData) } else { upload(fileData) } }; reader.readAsDataURL(file) } function scaleAndUpload(src) { var image = new Image(); image.onload = function () { var scaleWidth = this.naturalWidth, scaleHeight = this.naturalHeight; var canvas = document.createElement("canvas"); var ctx = canvas.getContext("2d"); canvas.width = scaleWidth; canvas.height = scaleHeight; ctx.drawImage(this, 0, 0, scaleWidth, scaleHeight); var fileData = null; if (navigator.userAgent.match(/iphone/i)) { if (orientation != "" && orientation != 1) { switch (orientation) { case 6: rotateImage(this, "right", canvas); break; case 8: rotateImage(this, "left", canvas); break; case 3: rotateImage(this, "left", canvas); rotateImage(this, "left", canvas); break } } fileData = canvas.toDataURL("image/jpeg", 0.9) } else { if (navigator.userAgent.match(/Android/i) && !true) { var encoder = new JPEGEncoder(); fileData = encoder.encode(ctx.getImageData(0, 0, expectWidth, expectHeight), 80) } else { if (orientation != "" && orientation != 1) { switch (orientation) { case 6: rotateImage(this, "right", canvas); break; case 8: rotateImage(this, "left", canvas); break; case 3: rotateImage(this, "left", canvas); rotateImage(this, "left", canvas); break } } fileData = canvas.toDataURL("image/jpeg", 0.9) } } upload(fileData) }; image.src = src } function upload(fileData) { if (options.asyncUpload && options.uploadUrl) { var postData = $.extend(options.postData, { fileName: fileName, fileType: fileType, data: fileData, count: fileCount, uploadVerNo: uploadVerNo }); $.post(options.uploadUrl, postData, function (res) { if (!res.success) { alert(res.message); $imgItem.remove(); if (onUploadComplete) { onUploadComplete.call() } return } $imgItem.find("span").attr("data-src", res.src); if (fileType == "image") { $imgItem.find("img").attr({ "src": res.src, "onload": loadimg }) } else { $imgItem.find("div a").attr("href", res.src); $imgItem.find("div a").text(fileName) } $imgItem.find(".pos").animate({ width: "100%" }, 0, "linear", function () { $imgItem.addClass("up-over"); uploadCountCheck(); if (onUploadComplete) { onUploadComplete.call() } }) }, "json") } else { $imgItem.find("img").attr({ "src": fileData, "onload": loadimg }); $imgItem.find(".pos").animate({ width: "100%" }, 500, "linear", function () { $imgItem.addClass("up-over"); uploadCountCheck(); if (onUploadComplete) { onUploadComplete.call() } }) } } readFile() } function rotateImage(image, direction, canvas) { if (image == null) { return } var min_step = 0, max_step = 3, step = 2, height = image.height, width = image.width; if (direction == "left") { step++; step > max_step && (step = min_step) } else { step--; step < min_step && (step = max_step) } var degree = step * 90 * Math.PI / 180; var ctx = canvas.getContext("2d"); switch (step) { case 0: canvas.width = width; canvas.height = height; ctx.drawImage(image, 0, 0, width, height); break; case 1: canvas.width = height; canvas.height = width; ctx.rotate(degree); ctx.drawImage(image, 0, -height, width, height); break; case 2: canvas.width = width; canvas.height = height; ctx.rotate(degree); ctx.drawImage(image, -width, -height, width, height); break; case 3: canvas.width = height; canvas.height = width; ctx.rotate(degree); ctx.drawImage(image, -width, 0, width, height); break } } function loadimg() { var e = this.parentNode; if (e) { var t = this.offsetHeight - e.offsetHeight; var w = this.offsetWidth - e.offsetWidth; 0 > t && (this.style.width = "auto", this.style.height = "100%"); 0 > w && (this.style.height = "auto", this.style.width = "100%") } } function uploadCountCheck() { if (isOverUploadLimit()) { $file.parent().hide() } else { $file.parent().show() } } function isOverUploadLimit() { return options.uploadLimit > 0 && $imgWrap.children().length >= options.uploadLimit } function getUploadFiles() { var files = []; $imgWrap.find("span").each(function () { files.push($(this).attr("data-src")) }); return files } function insertItem(src) { var fileName = getFileName(src); var fileType = getFileType(fileName); var $imgItem = $(imgItemHtml).appendTo($imgWrap); $imgItem.addClass("up-over"); if (fileType == "image") { $imgItem.find("img").attr({ "src": src, "onload": loadimg }) } else { $imgItem.find("img").css("display", "none"); $imgItem.find("span").attr("data-href", src); $imgItem.find("div a").attr("href", src); $imgItem.find("div a").text(fileName) } uploadCountCheck() } function clear() { $imgWrap.empty() } return init(), { "getUploadFiles": getUploadFiles, "insertItem": insertItem, "clear": clear }; function getFileType(fileName) { var suffixIndex = fileName.lastIndexOf("."); var suffix = fileName.substring(suffixIndex + 1).toUpperCase(); if (suffix != "BMP" && suffix != "JPG" && suffix != "JPEG" && suffix != "PNG" && suffix != "GIF") { return "file" } else { return "image" } } function getFileName(src) { var str = src; var url = str.split("?")[0]; var pathArray = url.split("/"); return pathArray[pathArray.length - 1] } } })(jQuery);